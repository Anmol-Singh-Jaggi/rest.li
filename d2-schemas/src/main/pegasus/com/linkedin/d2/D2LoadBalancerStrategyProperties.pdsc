{
  "type": "record",
  "name": "D2LoadBalancerStrategyProperties",
  "namespace": "com.linkedin.d2",
  "doc": "Load balancer properties for a particular D2 service",
  "fields": [
    {
      "name": "globalStepDown",
      "type": "double",
      "doc": "The step down function's delta size when adjusting the drop rate. Should be between 0.0 - 1.0. Defaults to 0.2.",
      "optional": true
    },
    {
      "name": "globalStepUp",
      "type": "double",
      "doc": "The step up function's delta size when adjusting the drop rate. Should be between 0.0 - 1.0. Defaults to 0.2.",
      "optional": true
    },
    {
      "name": "initialRecoveryLevel",
      "type": "double",
      "doc": "When a node is completely degraded, this config is used to determine the starting recovery weight for that node. Should be between 0.0 - 1.0. Defaults to 0.01.",
      "optional": true
    },
    {
      "name": "ringRampFactor",
      "type": "double",
      "doc": "How fast should load balancer ramp up node that has been 100% degraded and is being recovered. This is used with initialRecoveryLevel to recover the traffic of a node. Defaults to 1.0.",
      "optional": true
    },
    {
      "name": "highWaterMark",
      "type": "double",
      "doc": "If average ms latency for the entire service is over this number then we consider the service is in a bad state. Defaults to 3000ms.",
      "optional": true
    },
    {
      "name": "lowWaterMark",
      "type": "double",
      "doc": "If average ms latency for the entire service is lower than this number then we consider the service is in a good state. Defaults to 500ms.",
      "optional": true
    },
    {
      "name": "pointsPerWeight",
      "type": "int",
      "doc": "The number of points per weight given for a particular node in a hash ring. Defaults to 100.",
      "optional": true
    },
    {
      "name": "updateIntervalMs",
      "type": "long",
      "doc": "Interval in ms between each round of load balancer calculation. Defaults to 5000ms.",
      "optional": true
    },
    {
      "name": "minCallCountHighWaterMark",
      "type": "long",
      "doc": "If call count for the cluster for this service is over this number then we can use the statistics to calculate drop rate. Defaults to 10.",
      "optional": true
    },
    {
      "name": "minCallCountLowWaterMark",
      "type": "long",
      "doc": "If call count for the cluster for this service is below this number then we will not use the statistics to calculate drop rate. Defaults to 5.",
      "optional": true
    },
    {
      "name": "hashMethod",
      "type" : {
        "name" : "hashMethodEnum",
        "type" : "enum",
        "symbols" : ["RANDOM", "URI_REGEX"]
      },
      "doc": "What hashing method used to hash incoming request. Used to determine which node should serve the request. Choices are Random, UriRegex",
      "symbolDocs": {"RANDOM":"The default fall back value", "URI_REGEX":"Extract a key from URI and use it to hash"},
      "optional": true
    },
    {
      "name": "hashConfig",
      "type": {
        "type" : "record",
        "name" : "hashConfigType",
        "fields": [
          {
            "name": "uriRegexes",
            "type": {
              "type": "array",
              "items": "string"
            },
            "doc": "List of Regex to match against the URI of incoming request and compute hash value. The hash value is computed based on the contents of the first capture group of the first expression that matches the request URI",
            "optional": true
          },
          {
            "name": "failOnNoMatch",
            "type": "boolean",
            "doc": "Optional config value. if true, fail if no regex matches, otherwise fall back to random.",
            "default": false
          },
          {
            "name": "warnOnNoMatch",
            "type": "boolean",
            "doc": " Optional config value. if false, don't warn on falling back to random if the uri doesn't match the regex",
            "default": true
          }
        ]
      },
      "doc": "Configuration used to supplement the hash method.",
      "optional": true
    },
    {
      "name": "updateOnlyAtInterval",
      "type": "boolean",
      "doc": "Whether to update load balancer strategy state only at each update interval.",
      "default": false
    },
    {
      "name": "hashRingPointCleanupRate",
      "type": "double",
      "doc": "The highest ratio of unused entries over the total entries of the Ring points that d2 maintains.",
      "optional": true
    },
    {
      "name": "consistentHashAlgorithm",
      "type": {
        "name": "ConsistentHashAlgorithmEnum",
        "type": "enum",
        "symbols": [
          "POINT_BASED",
          "MULTI_PROBE",
          "DISTRIBUTION_BASED"
        ],
        "symbolDocs": {
          "POINT_BASED": "Point-based consistent hash ring. The more points the ring has, the more balanced it is.",
          "MULTI_PROBE": "Multi-probe consistent hash. The more probes to use, the more balanced the ring is.",
          "DISTRIBUTION_BASED": "Use points of hosts to build a distribution and make randomized host selection. NOTE: this algorithm DOES NOT support sticky routing"
        }
      },
      "doc": "Consistent hash algorithm the d2 load balancer should use. Defaults to POINT_BASED.",
      "optional": true
    },
    {
      "name": "numberOfProbes",
      "type": "int",
      "doc": "The number of probes used to look up a key in consistent hash ring. Defaults to 21.",
      "optional": true
    },
    {
      "name": "numberOfPointsPerHost",
      "type": "int",
      "doc": "The number of points on MultiProbe hash ring for each host. Defaults to 1.",
      "optional": true
    },
    {
      "name": "boundedLoadBalanceFactor",
      "type": "double",
      "doc": "The balancing factor for bounded-load consistent hashing. It is always greater than 1, meaning no server will be allowed to have a load more than a factor of the average. The higher the number, the more consistent and less balanced the hash ring. Set it to -1 to disable bounded-load feature, and set it to >= 1 to enable bounded load feature. Defaults to -1.",
      "optional": true
    },
    {
      "name": "quarantineCfg",
      "type": {
        "name": "quarantineInfo",
        "type": "record",
        "doc": "Config info for d2 quarantine feature",
        "fields": [
          {
            "name": "quarantineMaxPercent",
            "type": "double",
            "doc": "The percentage of the hosts that can be quarantined at the same time. It is also the switch to turn on Quarantine feature."
          },
          {
            "name": "quarantineMethod",
            "type": "string",
            "doc": "Config the health checking method for quarantine. Format: <METHOD>:<FULL_PATH>. Default to OPTIONS method.",
            "optional": true
          },
          {
            "name": "quarantineLatency",
            "type": "long",
            "doc": "The latency threshold (in milliseconds) for health checking response. Responding time longer than this threshold is considered as unhealthy.",
            "optional": true
          }
        ]
      },
      "optional": true
    },
    {
      "name": "errorStatusRegex",
      "type": "string",
      "doc": "Regular expression to match the status code indicates a server-side error.",
      "optional": true
    },
    {
      "name": "lowEmittingInterval",
      "type": "int",
      "doc": "Low emitting interval (in ms) for D2Monitor events. Generally used when abnormal events present in D2Monitor that need higher emitting frequency.",
      "optional": true
    },
    {
      "name": "highEmittingInterval",
      "type": "int",
      "doc": "High emitting interval (in ms) for D2Monitor events. Used for normal D2Monitor Event emitting.",
      "optional": true
    }
  ]
}